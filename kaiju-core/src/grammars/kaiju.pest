shebang = @{ !"#![" ~ "#!" ~ (!NEWLINE ~ ANY)* ~ NEWLINE+ }
identifier = { identifier_extended | identifier_simple }
identifier_simple = @{ ("_" | ASCII_ALPHA) ~ ("_" | "-" | ASCII_ALPHANUMERIC)* }
identifier_extended = ${ "$" ~ identifier_extended_characters }
identifier_extended_characters = @{ (ASCII_ALPHANUMERIC | "_" | "." | "+" | "-" | "*" | "/" | "\\" | "^" | "~" | "=" | "<" | ">" | "!" | "?" | "@" | "#" | "$" | "%" | "&" | "|" | ":" | "'" | "`")+ }
type_ann = { ":" ~ type_ }
type_ = { tuple_type | pointer_type | identifier }
tuple_type = { "(" ~ (type_ ~ ("," ~ type_)*)? ~ ","? ~ ")" }
pointer_type = { "*" ~ type_ }
string = ${ "'" ~ string_characters ~ "'" ~ UNDERLINE? ~ type_? }
string_characters = { ("\\'" ~ ANY | !"'" ~ ANY)* }
integer = ${ integer_inner ~ UNDERLINE? ~ type_? }
integer_inner = @{ (hex | "-"? ~ ASCII_DIGIT+) }
hex = @{ "0x" ~ hex_digit+ }
hex_digit = @{ '0'..'9' | 'A'..'F' }
float = ${ float_inner ~ UNDERLINE? ~ type_? }
float_inner = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ (("e" | "E") ~ ASCII_DIGIT+)? }
number = { float | integer }
tuple_value = { "(" ~ (value ~ ("," ~ value)*)? ~ ","? ~ ")" }
ref_value = { "&" ~ "<" ~ value ~ ">" }
deref_value = { "*" ~ "<" ~ value ~ ">" }
value = { value_content ~ ("." ~ value_access)? }
value_content = { ref_value | deref_value | function_call | tuple_value | string | number | operation_inline | variable_value }
value_access = { tuple_access | variable_access }
variable_value = { identifier }
tuple_access = { integer ~ ("." ~ value_access)? }
variable_access = { identifier ~ ("." ~ value_access)? }
variable = { identifier ~ type_ann }
export = { "export" }
label = { identifier ~ ":" }
block = { "{" ~ (label | operation ~ SEP)* ~ "}" }
operation = { meta_local* ~ operation_id ~ operation_params ~ operation_targets?}
operation_inline = { "!" ~ "<" ~ operation_id ~ operation_params ~ ">" }
operation_id = { identifier_simple }
operation_params = { value* }
operation_targets = { "=>" ~ value+ }
function = { meta_local* ~ export? ~ function_header ~ function_locals? ~ block }
function_header = { "fn" ~ identifier ~ function_params ~ type_ann? }
function_params = { "(" ~ (variable ~ ("," ~ variable)*)? ~ ","? ~ ")" }
function_locals = { "<" ~ (variable ~ ("," ~ variable)*)? ~ ","? ~ ">" }
function_call = { "@" ~ "<" ~ identifier ~ function_call_args ~ ">" }
function_call_args = { "(" ~ (value ~ ("," ~ value)* ~ ","?)? ~ ")" }
meta_global = { "#![" ~ meta_fields ~"]" ~ SEP }
meta_local = { "#[" ~ meta_fields ~"]" }
meta_fields = { meta_field ~ ("," ~ meta_field)* ~ ","? }
meta_field = { identifier ~ meta_field_args? }
meta_field_args = { "(" ~ (meta_value ~ ("," ~ meta_value)* ~ ","?)? ~ ")" }
meta_value = { string | number | meta_named_value | meta_field }
meta_named_value = { identifier ~ "=" ~ meta_value }
extern_ = { meta_local* ~ "extern" ~ extern_item ~ "from" ~ extern_location ~ SEP }
extern_item = { function_header }
extern_location = { identifier ~ ":" ~ identifier }
import = { meta_local* ~ "import" ~ (import_names | import_name)? ~ "from" ~ import_module ~ SEP }
import_name = { identifier }
import_names = { "{" ~ import_name ~ ("," ~ import_name)* ~ ","? ~ "}" }
import_module = { string }
globals = { "<" ~ variable ~ ("," ~ variable)* ~ ","? ~ ">" }
struct_ = { meta_local* ~ export? ~ "struct" ~ identifier ~ struct_fields }
struct_fields = { "{" ~ (variable ~ ("," ~ variable)* ~ ","?)? ~ "}" }
instruction = { meta_global | extern_ | import | function | globals | struct_ | NEWLINE+ }
module = { SOI ~ shebang? ~ instruction* ~ EOI }

op_rule = { meta_local* ~ identifier_simple ~ op_param* ~ op_targets? ~ op_rule_def }
op_rule_def = { "{" ~ (op_rule_def_field)* ~ "}" }
op_rule_def_field = { op_rule_def_field_id ~ ":" ~ op_rule_def_field_desc }
op_rule_def_field_id = @{ identifier_simple }
op_rule_def_field_desc = { "{" ~ (op_rule_def_field_desc_field ~ ("," ~ op_rule_def_field_desc_field)* ~ ","?)? ~ "}" }
op_rule_def_field_desc_field = { identifier_simple ~ ":" ~ string }
op_value = { type_ }
op_param = { identifier_simple ~ ":" ~ op_value }
op_targets = { "=>" ~ type_+ }
ops_descriptor = { SOI ~ (meta_global | op_rule)* ~ EOI }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ COMMENT_MULTI | COMMENT_SINGLE }
COMMENT_SINGLE = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE+ }
COMMENT_MULTI = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
SEP = _{ ";" }
UNDERLINE = _{ "_" }
